{"remainingRequest":"/Users/kimjunho/front/ssafyart_front/node_modules/babel-loader/lib/index.js!/Users/kimjunho/front/ssafyart_front/node_modules/eslint-loader/index.js??ref--13-0!/Users/kimjunho/front/ssafyart_front/src/store/modules/auth.js","dependencies":[{"path":"/Users/kimjunho/front/ssafyart_front/src/store/modules/auth.js","mtime":1587919669295},{"path":"/Users/kimjunho/front/ssafyart_front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kimjunho/front/ssafyart_front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kimjunho/front/ssafyart_front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGp3dERlY29kZSBmcm9tICdqd3QtZGVjb2RlJzsKdmFyIHN0YXRlID0gewogIHRva2VuOiBudWxsLAogIGxvYWRpbmc6IGZhbHNlCn07CnZhciBnZXR0ZXJzID0gewogIGlzTG9nZ2VkSW46IGZ1bmN0aW9uIGlzTG9nZ2VkSW4oc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS50b2tlbiA/IHRydWUgOiBmYWxzZTsKICB9LAogIHJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uIHJlcXVlc3RIZWFkZXIoc3RhdGUpIHsKICAgIHJldHVybiB7CiAgICAgIGhlYWRlcnM6IHsKICAgICAgICBBdXRob3JpemF0aW9uOiAnSldUICcgKyBzdGF0ZS50b2tlbgogICAgICB9CiAgICB9OwogIH0sCiAgdXNlcklkOiBmdW5jdGlvbiB1c2VySWQoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS50b2tlbiA/IGp3dERlY29kZShzdGF0ZS50b2tlbikudXNlcl9pZCA6IG51bGw7CiAgfQp9OyAvLyDsg4Htg5wo7Yag7YGwKeydhCDrsJvslYTsmYDshJwgc3RhdGXrpbwgdXBkYXRlCgp2YXIgbXV0YXRpb25zID0gewogIHNldFRva2VuOiBmdW5jdGlvbiBzZXRUb2tlbihzdGF0ZSwgdG9rZW4pIHsKICAgIHN0YXRlLnRva2VuID0gdG9rZW47CiAgfSwKICBzZXRMb2FkaW5nOiBmdW5jdGlvbiBzZXRMb2FkaW5nKHN0YXRlLCBzdGF0dXMpIHsKICAgIHN0YXRlLmxvYWRpbmcgPSBzdGF0dXM7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICBsb2dpbjogZnVuY3Rpb24gbG9naW4ob3B0aW9ucywgdG9rZW4pIHsKICAgIG9wdGlvbnMuY29tbWl0KCdzZXRUb2tlbicsIHRva2VuKTsKICB9LAogIGxvZ291dDogZnVuY3Rpb24gbG9nb3V0KG9wdGlvbnMpIHsKICAgIG9wdGlvbnMuY29tbWl0KCdzZXRUb2tlbicpOwogIH0sCiAgc3RhcnRMb2FkaW5nOiBmdW5jdGlvbiBzdGFydExvYWRpbmcob3B0aW9ucykgewogICAgb3B0aW9ucy5jb21taXQoJ3NldExvYWRpbmcnLCB0cnVlKTsKICB9LAogIGVuZExvYWRpbmc6IGZ1bmN0aW9uIGVuZExvYWRpbmcob3B0aW9ucykgewogICAgb3B0aW9ucy5jb21taXQoJ3NldExvYWRpbmcnLCBmYWxzZSk7CiAgfQp9OwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHN0YXRlLAogIG11dGF0aW9uczogbXV0YXRpb25zLAogIGFjdGlvbnM6IGFjdGlvbnMsCiAgZ2V0dGVyczogZ2V0dGVycwp9Ow=="},{"version":3,"sources":["/Users/kimjunho/front/ssafyart_front/src/store/modules/auth.js"],"names":["jwtDecode","state","token","loading","getters","isLoggedIn","requestHeader","headers","Authorization","userId","user_id","mutations","setToken","setLoading","status","actions","login","options","commit","logout","startLoading","endLoading"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,IADK;AAEZC,EAAAA,OAAO,EAAE;AAFG,CAAd;AAKA,IAAMC,OAAO,GAAG;AACdC,EAAAA,UAAU,EAAE,oBAASJ,KAAT,EAAgB;AAC1B,WAAOA,KAAK,CAACC,KAAN,GAAc,IAAd,GAAqB,KAA5B;AACD,GAHa;AAIdI,EAAAA,aAAa,EAAE,uBAASL,KAAT,EAAgB;AAC7B,WAAO;AACLM,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,SAASP,KAAK,CAACC;AADvB;AADJ,KAAP;AAKD,GAVa;AAWdO,EAAAA,MAAM,EAAE,gBAASR,KAAT,EAAgB;AACtB,WAAOA,KAAK,CAACC,KAAN,GAAcF,SAAS,CAACC,KAAK,CAACC,KAAP,CAAT,CAAuBQ,OAArC,GAA+C,IAAtD;AACD;AAba,CAAhB,C,CAgBA;;AACA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,kBAASX,KAAT,EAAgBC,KAAhB,EAAuB;AAC/BD,IAAAA,KAAK,CAACC,KAAN,GAAcA,KAAd;AACD,GAHe;AAIhBW,EAAAA,UAAU,EAAE,oBAASZ,KAAT,EAAgBa,MAAhB,EAAwB;AAClCb,IAAAA,KAAK,CAACE,OAAN,GAAgBW,MAAhB;AACD;AANe,CAAlB;AASA,IAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,eAASC,OAAT,EAAkBf,KAAlB,EAAyB;AAC9Be,IAAAA,OAAO,CAACC,MAAR,CAAe,UAAf,EAA2BhB,KAA3B;AACD,GAHa;AAIdiB,EAAAA,MAAM,EAAE,gBAASF,OAAT,EAAkB;AACxBA,IAAAA,OAAO,CAACC,MAAR,CAAe,UAAf;AACD,GANa;AAOdE,EAAAA,YAAY,EAAE,sBAASH,OAAT,EAAkB;AAC9BA,IAAAA,OAAO,CAACC,MAAR,CAAe,YAAf,EAA6B,IAA7B;AACD,GATa;AAUdG,EAAAA,UAAU,EAAE,oBAASJ,OAAT,EAAkB;AAC5BA,IAAAA,OAAO,CAACC,MAAR,CAAe,YAAf,EAA6B,KAA7B;AACD;AAZa,CAAhB;AAeA,eAAe;AACbjB,EAAAA,KAAK,EAALA,KADa;AAEbU,EAAAA,SAAS,EAATA,SAFa;AAGbI,EAAAA,OAAO,EAAPA,OAHa;AAIbX,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import jwtDecode from 'jwt-decode'\n\nconst state = {\n  token: null,\n  loading: false,\n}\n\nconst getters = {\n  isLoggedIn: function(state) {\n    return state.token ? true : false\n  },\n  requestHeader: function(state) {\n    return {\n      headers: {\n        Authorization: 'JWT ' + state.token\n      }\n    }\n  },\n  userId: function(state) {\n    return state.token ? jwtDecode(state.token).user_id : null\n  }\n}\n\n// 상태(토큰)을 받아와서 state를 update\nconst mutations = {\n  setToken: function(state, token) {\n    state.token = token\n  },\n  setLoading: function(state, status) {\n    state.loading = status\n  }\n}\n\nconst actions = {\n  login: function(options, token) {\n    options.commit('setToken', token)\n  },\n  logout: function(options) {\n    options.commit('setToken')\n  },\n  startLoading: function(options) {\n    options.commit('setLoading', true)\n  },\n  endLoading: function(options) {\n    options.commit('setLoading', false)\n  },\n}\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters,\n}"]}]}