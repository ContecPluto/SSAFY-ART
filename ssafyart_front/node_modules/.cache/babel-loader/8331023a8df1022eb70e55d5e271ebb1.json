{"remainingRequest":"/Users/kimjunho/front/ssafyart_front/node_modules/babel-loader/lib/index.js!/Users/kimjunho/front/ssafyart_front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kimjunho/front/ssafyart_front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kimjunho/front/ssafyart_front/src/components/components/Paintable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kimjunho/front/ssafyart_front/src/components/components/Paintable.vue","mtime":1587609111344},{"path":"/Users/kimjunho/front/ssafyart_front/node_modules/cache-loader/dist/cjs.js","mtime":1579183904604},{"path":"/Users/kimjunho/front/ssafyart_front/node_modules/babel-loader/lib/index.js","mtime":1587098298841},{"path":"/Users/kimjunho/front/ssafyart_front/node_modules/cache-loader/dist/cjs.js","mtime":1579183904604},{"path":"/Users/kimjunho/front/ssafyart_front/node_modules/vue-loader/lib/index.js","mtime":1587098312803}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9raW1qdW5oby9mcm9udC9zc2FmeWFydF9mcm9udC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCnZhciBjdXJyZW50WCA9IDA7CnZhciBjdXJyZW50WSA9IDA7CmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vTmF2aWdhdGlvbic7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAncGFpbnRhYmxlJywKICBjb21wb25lbnRzOiB7CiAgICBOYXZpZ2F0aW9uOiBOYXZpZ2F0aW9uCiAgfSwKICBwcm9wczogewogICAgZmFjdG9yOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMQogICAgfSwKICAgIG5hdmlnYXRpb246IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0OiBudWxsCiAgICB9LAogICAgYWx3YXlzT25Ub3A6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKICAgIG5hbWU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIHdpZHRoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogd2luZG93LmlubmVyV2lkdGgKICAgIH0sCiAgICBoZWlnaHQ6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiB3aW5kb3cuaW5uZXJIZWlnaHQKICAgIH0sCiAgICBoaWRlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgdGhyZXNob2xkOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMAogICAgfSwKICAgIHNob3dVbmRvUmVkbzogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgc2hvd0xpbmVXaWR0aDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgbGluZVdpZHRoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogNQogICAgfSwKICAgIGxpbmVXaWR0aEVyYXNlcjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDIwCiAgICB9LAogICAgY29sb3JzOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gWydibGFjaycsICcjZjAwJywgJyM0NDgxYzcnLCAncmdiYSgyNTUsIDIzNSwgNTksIDAuNCknLCAnIzk5OScsICdncmVlbiddOwogICAgICB9CiAgICB9LAogICAgaG9yaXpvbnRhbE5hdmlnYXRpb246IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBkaXNhYmxlTmF2aWdhdGlvbjogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGFjdGl2ZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGNvbG9yOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJyMwMDAnCiAgICB9LAogICAgdXNlRXJhc2VyOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY3VycmVudENvbG9yOiB0aGlzLmNvbG9yLAogICAgICBjYW52YXNJc0VtcHR5OiBmYWxzZSwKICAgICAgY2FudmFzSWQ6IDAsCiAgICAgIGlzRXJhc2VyQWN0aXZlOiB0aGlzLnVzZUVyYXNlciwKICAgICAgaXNBY3RpdmU6IHRoaXMuYWN0aXZlLAogICAgICBwb2ludENvb3JkczogW10sCiAgICAgIHJlZG9MaXN0OiBbXSwKICAgICAgdW5kb0xpc3Q6IFtdLAogICAgICBjdXJyZW50TGluZVdpZHRoOiB0aGlzLmlzRXJhc2VyQWN0aXZlID8gdGhpcy5saW5lV2lkdGhFcmFzZXIgOiB0aGlzLmxpbmVXaWR0aCwKICAgICAgdGVtcENhbnZhczogbnVsbCwKICAgICAgdGVtcEN0eDogbnVsbCwKICAgICAgY2FudmFzOiBudWxsLAogICAgICBjdHg6IG51bGwsCiAgICAgIHN0YXJ0ZWREcmF3aW5nOiBmYWxzZSwKICAgICAgZHJhd01vdmVFdmVudDogJ21vdXNlbW92ZScsCiAgICAgIGRyYXdTdGFydEV2ZW50OiAnbW91c2Vkb3duJywKICAgICAgZHJhd0VuZEV2ZW50OiAnbW91c2V1cCcsCiAgICAgIGlzTW91c2U6IHRydWUsCiAgICAgIHRocmVzaG9sZFJlYWNoZWQ6IGZhbHNlCiAgICB9OwogIH0sCiAgd2F0Y2g6IHsKICAgIGlzQWN0aXZlOiAnaW5pdCcsCiAgICBuYW1lOiAnaW5pdCcsCiAgICBoaWRlOiBmdW5jdGlvbiBoaWRlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLmluaXQoKTsKICAgICAgfSk7CiAgICB9LAogICAgbGluZVdpZHRoOiBmdW5jdGlvbiBsaW5lV2lkdGgoX2xpbmVXaWR0aCkgewogICAgICB0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSBfbGluZVdpZHRoOwogICAgfSwKICAgIGxpbmVXaWR0aEVyYXNlcjogZnVuY3Rpb24gbGluZVdpZHRoRXJhc2VyKGxpbmVXaWR0aCkgewogICAgICB0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSBsaW5lV2lkdGg7CiAgICB9LAogICAgdXNlRXJhc2VyOiBmdW5jdGlvbiB1c2VFcmFzZXIoX3VzZUVyYXNlcikgewogICAgICB0aGlzLmlzRXJhc2VyQWN0aXZlID0gX3VzZUVyYXNlcjsKICAgIH0sCiAgICBhY3RpdmU6IGZ1bmN0aW9uIGFjdGl2ZShpc0FjdGl2ZSkgewogICAgICB0aGlzLmlzQWN0aXZlID0gaXNBY3RpdmU7CiAgICB9LAogICAgY29sb3I6IGZ1bmN0aW9uIGNvbG9yKF9jb2xvcikgewogICAgICB0aGlzLmN1cnJlbnRDb2xvciA9IF9jb2xvcjsKICAgICAgdGhpcy50ZW1wQ3R4LnN0cm9rZVN0eWxlID0gdGhpcy5jdXJyZW50Q29sb3I7CiAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5jdXJyZW50Q29sb3I7CiAgICB9LAogICAgaXNFcmFzZXJBY3RpdmU6IGZ1bmN0aW9uIGlzRXJhc2VyQWN0aXZlKGlzQWN0aXZlKSB7CiAgICAgIHRoaXMuY3VycmVudExpbmVXaWR0aCA9IGlzQWN0aXZlID8gdGhpcy5saW5lV2lkdGhFcmFzZXIgOiB0aGlzLmxpbmVXaWR0aDsKICAgIH0sCiAgICBjdXJyZW50TGluZVdpZHRoOiBmdW5jdGlvbiBjdXJyZW50TGluZVdpZHRoKGxpbmVXaWR0aCkgewogICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7CiAgICAgIHRoaXMudGVtcEN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7CiAgICB9CiAgfSwKICBiZWZvcmVNb3VudDogZnVuY3Rpb24gYmVmb3JlTW91bnQoKSB7CiAgICB0aGlzLmNhbnZhc0lkID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMCk7CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgaWYgKHRoaXMuaXNUb3VjaCkgewogICAgICB0aGlzLmRyYXdNb3ZlRXZlbnQgPSAndG91Y2htb3ZlJzsKICAgICAgdGhpcy5kcmF3U3RhcnRFdmVudCA9ICd0b3VjaHN0YXJ0JzsKICAgICAgdGhpcy5kcmF3RW5kRXZlbnQgPSAndG91Y2hlbmQnOwogICAgICB0aGlzLmlzTW91c2UgPSBmYWxzZTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmluaXQoKTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvKioKICAgICAqIEdldCBzY2FsaW5nIGZhY3RvciBvZiBjdXJyZW50IGRldmljZQogICAgICovCiAgICBzY2FsaW5nRmFjdG9yOiBmdW5jdGlvbiBzY2FsaW5nRmFjdG9yKCkgewogICAgICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDaGVjayBpZiBpdCBpcyBhIHRvdWNoIGRldmljZQogICAgICogdGhhbmtzIHRvOiBodHRwczovL2N0cmxxLm9yZy9jb2RlLzE5NjE2LWRldGVjdC10b3VjaC1zY3JlZW4tamF2YXNjcmlwdAogICAgICovCiAgICBpc1RvdWNoOiBmdW5jdGlvbiBpc1RvdWNoKCkgewogICAgICByZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IG5hdmlnYXRvci5NYXhUb3VjaFBvaW50cyA+IDAgfHwgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAwOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLyoqCiAgICAgKiBDYW5jZWwgY3VycmVudCBkcmF3aW5nIGFuZCByZW1vdmUgbGluZXMKICAgICAqLwogICAgY2FuY2VsRHJhd2luZzogZnVuY3Rpb24gY2FuY2VsRHJhd2luZygpIHsKICAgICAgdGhpcy5sb2FkSW1hZ2VGcm9tU3RvcmFnZSgpOwogICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7CiAgICAgIHRoaXMuaXNDb2xvclBpY2tlck9wZW4gPSBmYWxzZTsKICAgICAgdGhpcy5pc0xpbmVXaWR0aFBpY2tlck9wZW4gPSBmYWxzZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBTZXQgc3RvcmFnZSBpdGVtCiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5CiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUKICAgICAqLwogICAgc2V0SXRlbTogZnVuY3Rpb24gc2V0SXRlbShrZXksIHZhbHVlKSB7CiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpOwogICAgfSwKCiAgICAvKioKICAgICAqIEdldCBzdG9yYWdlIGl0ZW0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkKICAgICAqLwogICAgZ2V0SXRlbTogZnVuY3Rpb24gZ2V0SXRlbShrZXkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKCiAgICAvKioKICAgICAqIFJlbW92ZSBpdGVtIGZyb20gc3RvcmFnZQogICAgICogQHBhcmFtIHtzdHJpbmd9IGtleQogICAgICovCiAgICByZW1vdmVJdGVtOiBmdW5jdGlvbiByZW1vdmVJdGVtKGtleSkgewogICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpOwogICAgfSwKCiAgICAvKioKICAgICAqIEluaXQgcGFpbnRhYmxlIGNvbXBvbmVudCBhbmQgc2V0IGFsbCB2YXJpYWJsZXMKICAgICAqLwogICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgdHJ5IHsKICAgICAgICB0aGlzLnBvaW50Q29vcmRzID0gW107IC8vIHRlbXBvcmFyeSBjYW52YXMKCiAgICAgICAgdGhpcy50ZW1wQ2FudmFzID0gdGhpcy4kcmVmc1sndGVtcC1jYW52YXMtJyArIHRoaXMuY2FudmFzSWRdOwogICAgICAgIHRoaXMudGVtcEN0eCA9IHRoaXMudGVtcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpOyAvLyBjYW52YXMgd2l0aCBkcmF3aW5nCgogICAgICAgIHRoaXMuY2FudmFzID0gdGhpcy4kcmVmc1snY2FudmFzLScgKyB0aGlzLmNhbnZhc0lkXTsKICAgICAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgICAgICAgdGhpcy50ZW1wQ3R4LmxpbmVDYXAgPSAncm91bmQnOwogICAgICAgIHRoaXMuY3R4LmxpbmVDYXAgPSAncm91bmQnOwogICAgICAgIHRoaXMudGVtcEN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDsKICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDsKICAgICAgICB0aGlzLnRlbXBDdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmN1cnJlbnRDb2xvcjsKICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY3VycmVudENvbG9yOwogICAgICAgIHRoaXMuc2V0SXRlbSh0aGlzLm5hbWUgKyAnLXNldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgd2lkdGg6IHRoaXMuY2FudmFzLndpZHRoLAogICAgICAgICAgaGVpZ2h0OiB0aGlzLmNhbnZhcy5oZWlnaHQKICAgICAgICB9KSk7IC8vIHNldCBjYW52YXMgd2lkdGggYW5kIGhlaWdodAoKICAgICAgICB0aGlzLnNldENhbnZhc1NpemUoKTsgLy8gbG9hZCBpbWFnZSBmcm9tIHN0b3JhZ2UKCiAgICAgICAgdGhpcy5sb2FkSW1hZ2VGcm9tU3RvcmFnZSgpOwogICAgICAgIHRoaXMuJGVtaXQoJ3RvZ2dsZS1wYWludGFibGUnLCB0aGlzLmlzQWN0aXZlKTsKICAgICAgfSBjYXRjaCAoZXJyKSB7Ly8gdGhpcy5oaWRlID0gdHJ1ZTsKICAgICAgICAvLyB0aGlzLmhpZGVQYWludGFibGVOYXZpZ2F0aW9uID0gdHJ1ZTsKICAgICAgfQogICAgfSwKICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAvKioKICAgICAqIFVuZG8gZHJhd2VkIGxpbmUKICAgICAqLwogICAgdW5kb0RyYXdpbmdTdGVwOiBmdW5jdGlvbiB1bmRvRHJhd2luZ1N0ZXAoKSB7CiAgICAgIHRoaXMucmVzdG9yZUNhbnZhc1N0YXRlKHRoaXMudW5kb0xpc3QsIHRoaXMucmVkb0xpc3QpOwogICAgfSwKCiAgICAvKioKICAgICAqIFJlZG8gZHJhd2VkIGxpbmUKICAgICAqLwogICAgcmVkb0RyYXdpbmdTdGVwOiBmdW5jdGlvbiByZWRvRHJhd2luZ1N0ZXAoKSB7CiAgICAgIHRoaXMucmVzdG9yZUNhbnZhc1N0YXRlKHRoaXMucmVkb0xpc3QsIHRoaXMudW5kb0xpc3QpOwogICAgfSwKCiAgICAvKioKICAgICAqIFJlc3RvcmUgcHJldmlvdXMgaW1hZ2UKICAgICAqLwogICAgcmVzdG9yZUNhbnZhc1N0YXRlOiBmdW5jdGlvbiByZXN0b3JlQ2FudmFzU3RhdGUocG9wLCBwdXNoKSB7CiAgICAgIHRoaXMuY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7CgogICAgICBpZiAocG9wLmxlbmd0aCkgewogICAgICAgIHZhciByZXN0b3JlX3N0YXRlID0gcG9wLnBvcCgpOwogICAgICAgIHRoaXMuc2F2ZUN1cnJlbnRDYW52YXNTdGF0ZSh0aGlzLmNhbnZhcywgcHVzaCwgdHJ1ZSk7CiAgICAgICAgdGhpcy5sb2FkSW1hZ2VGcm9tU3RvcmFnZShyZXN0b3JlX3N0YXRlKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIFNhdmUgdGhlIGN1cnJlbnQgY2FudmFzIHN0YXRlIGFuIHB1c2ggaXQgdG8gdW5kby0gb3IgcmVkb2xpc3QKICAgICAqLwogICAgc2F2ZUN1cnJlbnRDYW52YXNTdGF0ZTogZnVuY3Rpb24gc2F2ZUN1cnJlbnRDYW52YXNTdGF0ZShjYW52YXMsIGxpc3QsIGtlZXBSZWRvKSB7CiAgICAgIGtlZXBSZWRvID0ga2VlcFJlZG8gfHwgZmFsc2U7CgogICAgICBpZiAoIWtlZXBSZWRvKSB7CiAgICAgICAgdGhpcy5yZWRvTGlzdCA9IFtdOwogICAgICB9CgogICAgICAobGlzdCB8fCB0aGlzLnVuZG9MaXN0KS5wdXNoKGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpKTsKICAgIH0sCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICAvKioKICAgICAqIEdldCBiYXNlNjQgZnJvbSBsb2NhbCBzdG9yYWdlIGFuZCBsb2FkIGl0IGludG8gY2FudmFzCiAgICAgKi8KICAgIGxvYWRJbWFnZUZyb21TdG9yYWdlOiBmdW5jdGlvbiBsb2FkSW1hZ2VGcm9tU3RvcmFnZShpbWFnZSkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBiYXNlNjRJbWFnZSwgX2ltYWdlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXMyLmNsZWFyQ2FudmFzKCk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gaW1hZ2U7CgogICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0Mi50MCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZ2V0SXRlbShfdGhpczIubmFtZSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBiYXNlNjRJbWFnZSA9IF9jb250ZXh0Mi50MDsKCiAgICAgICAgICAgICAgICBpZiAoYmFzZTY0SW1hZ2UpIHsKICAgICAgICAgICAgICAgICAgX2ltYWdlID0gbmV3IEltYWdlKCk7CgogICAgICAgICAgICAgICAgICBfaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIF90aGlzMi5jdHguZHJhd0ltYWdlKF9pbWFnZSwgMCwgMCk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzMi5jYW52YXNJc0VtcHR5ID0gX3RoaXMyLmlzQ2FudmFzQmxhbmsoKTsKICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgIF9pbWFnZS5zcmMgPSBiYXNlNjRJbWFnZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgX3RoaXMyLmNhbnZhc0lzRW1wdHkgPSBfdGhpczIuaXNDYW52YXNCbGFuaygpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBTZXQgY3VycmVudCBjYW52YXMgc2l6ZQogICAgICovCiAgICBzZXRDYW52YXNTaXplOiBmdW5jdGlvbiBzZXRDYW52YXNTaXplKCkgewogICAgICAvLyB0aGlzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7CiAgICAgIC8vIHRoaXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0OwogICAgICBjdXJyZW50WCA9IDA7CiAgICAgIGN1cnJlbnRZID0gMDsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDbGVhciBjb21wbGV0ZSBjYW52YXMKICAgICAqLwogICAgY2xlYXJDYW52YXM6IGZ1bmN0aW9uIGNsZWFyQ2FudmFzKCkgewogICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7CiAgICB9LAogICAgaXNDYW52YXNCbGFuazogZnVuY3Rpb24gaXNDYW52YXNCbGFuaygpIHsKICAgICAgdGhpcy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJzsKICAgICAgdmFyIGJsYW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgICAgIHZhciBibGFua0N0eCA9IGJsYW5rLmdldENvbnRleHQoJzJkJyk7CiAgICAgIGJsYW5rQ3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTsKICAgICAgYmxhbmsud2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aDsKICAgICAgYmxhbmsuaGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0OwogICAgICByZXR1cm4gYmxhbmsudG9EYXRhVVJMKCkgPT09IHRoaXMuY2FudmFzLnRvRGF0YVVSTCgpOwogICAgfSwKCiAgICAvKioKICAgICAqIENoZWNrIGZpcnN0LCBpZiBjYW52YXMgaXMgZW1wdHkuCiAgICAgKiBJZiBpdHMgbm90IGVtcHR5IHNhdmUgaXQgdG8gdGhlIHN0b3JhZ2UuCiAgICAgKi8KICAgIHNhdmVDdXJyZW50Q2FudmFzVG9TdG9yYWdlOiBmdW5jdGlvbiBzYXZlQ3VycmVudENhbnZhc1RvU3RvcmFnZSgpIHsKICAgICAgLy8gcmVzZXQgdG8gcGVuY2lsCiAgICAgIHRoaXMuaXNFcmFzZXJBY3RpdmUgPSBmYWxzZTsKCiAgICAgIGlmICh0aGlzLmlzQ2FudmFzQmxhbmsoKSkgewogICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0aGlzLm5hbWUpOwogICAgICAgIHRoaXMucmVtb3ZlSXRlbSh0aGlzLm5hbWUgKyAnLXNldHRpbmdzJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMubmFtZSwgdGhpcy5jYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7CiAgICAgICAgdGhpcy5zZXRJdGVtKHRoaXMubmFtZSArICctc2V0dGluZ3MnLCBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICB3aWR0aDogdGhpcy5jYW52YXMud2lkdGgsCiAgICAgICAgICBoZWlnaHQ6IHRoaXMuY2FudmFzLmhlaWdodAogICAgICAgIH0pKTsKICAgICAgfQoKICAgICAgdGhpcy51bmRvTGlzdCA9IFtdOwogICAgICB0aGlzLnJlZG9MaXN0ID0gW107CiAgICAgIHRoaXMuY2FudmFzSXNFbXB0eSA9IHRoaXMuaXNDYW52YXNCbGFuaygpOwogICAgfSwKICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIC8qKgogICAgICogU3RhcnQgZHJhd2luZyBsaW5lcwogICAgICovCiAgICBkcmF3U3RhcnQ6IGZ1bmN0aW9uIGRyYXdTdGFydChlKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgdGhpcy50aHJlc2hvbGRSZWFjaGVkID0gZmFsc2U7CgogICAgICBpZiAodGhpcy5pc0FjdGl2ZSkgewogICAgICAgIHRoaXMuaXNMaW5lV2lkdGhQaWNrZXJPcGVuID0gZmFsc2U7CiAgICAgICAgdGhpcy5pc0NvbG9yUGlja2VyT3BlbiA9IGZhbHNlOwogICAgICAgIHRoaXMuc3RhcnRlZERyYXdpbmcgPSB0cnVlOwogICAgICAgIHRoaXMuc2F2ZUN1cnJlbnRDYW52YXNTdGF0ZSh0aGlzLmNhbnZhcyk7CiAgICAgICAgdmFyIHggPSAhdGhpcy5pc01vdXNlID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7CiAgICAgICAgdmFyIHkgPSAhdGhpcy5pc01vdXNlID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFkgOiBlLmNsaWVudFk7CgogICAgICAgIGlmICh4ICYmIHkpIHsKICAgICAgICAgIGN1cnJlbnRYID0geCAqIHRoaXMuZmFjdG9yIC0gdGhpcy50ZW1wQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7CiAgICAgICAgICBjdXJyZW50WSA9IHkgKiB0aGlzLmZhY3RvciAtIHRoaXMudGVtcENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7CiAgICAgICAgICB0aGlzLnBvaW50Q29vcmRzLnB1c2goewogICAgICAgICAgICB4OiBjdXJyZW50WCwKICAgICAgICAgICAgeTogY3VycmVudFkKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgdGhpcy50ZW1wQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7CiAgICAgICAgdGhpcy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gdGhpcy5pc0VyYXNlckFjdGl2ZSA/ICdkZXN0aW5hdGlvbi1vdXQnIDogJ3NvdXJjZS1vdmVyJzsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIEVuZCBvZiBkcmF3aW5nIGEgbGluZQogICAgICovCiAgICBkcmF3RW5kOiBmdW5jdGlvbiBkcmF3RW5kKCkgewogICAgICBpZiAodGhpcy5pc0FjdGl2ZSkgewogICAgICAgIHRoaXMuZHJhd0xpbmUodGhpcy5jdHgpOwogICAgICAgIHRoaXMuc3RhcnRlZERyYXdpbmcgPSBmYWxzZTsKICAgICAgICB0aGlzLnBvaW50Q29vcmRzID0gW107CiAgICAgICAgdGhpcy50aHJlc2hvbGRSZWFjaGVkID0gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSBsaW5lIGZyb20gcG9pbnRzIGFycmF5CiAgICAgKi8KICAgIGRyYXdMaW5lOiBmdW5jdGlvbiBkcmF3TGluZShjb250ZXh0KSB7CiAgICAgIHRoaXMudGVtcEN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7CiAgICAgIHZhciBwMSA9IHRoaXMucG9pbnRDb29yZHNbMF07CiAgICAgIHZhciBwMiA9IHRoaXMucG9pbnRDb29yZHNbMV07CgogICAgICBpZiAocDEgJiYgcDIgJiYgcDEueCAmJiBwMS55KSB7CiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTsKICAgICAgICBjb250ZXh0Lm1vdmVUbyhwMS54LCBwMS55KTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHRoaXMucG9pbnRDb29yZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgIHZhciBtaWRQb2ludCA9IHsKICAgICAgICAgICAgeDogcDEueCArIChwMi54IC0gcDEueCkgLyAyLAogICAgICAgICAgICB5OiBwMS55ICsgKHAyLnkgLSBwMS55KSAvIDIKICAgICAgICAgIH07CiAgICAgICAgICBjb250ZXh0LnF1YWRyYXRpY0N1cnZlVG8ocDEueCwgcDEueSwgbWlkUG9pbnQueCwgbWlkUG9pbnQueSk7CiAgICAgICAgICBwMSA9IHRoaXMucG9pbnRDb29yZHNbaV07CiAgICAgICAgICBwMiA9IHRoaXMucG9pbnRDb29yZHNbaSArIDFdOwogICAgICAgIH0KCiAgICAgICAgY29udGV4dC5saW5lVG8ocDEueCwgcDEueSk7CiAgICAgICAgY29udGV4dC5zdHJva2UoKTsKICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogRHJhdyBsaW5lIG9uIG1vdmUgYW5kIGFkZCBjdXJyZW50IHBvc2l0aW9uIHRvIGFuIGFycmF5CiAgICAgKi8KICAgIGRyYXdNb3ZlOiBmdW5jdGlvbiBkcmF3TW92ZShlKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgIGlmICh0aGlzLmlzQWN0aXZlICYmIHRoaXMuc3RhcnRlZERyYXdpbmcpIHsKICAgICAgICB2YXIgeCA9ICF0aGlzLmlzTW91c2UgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WCA6IGUuY2xpZW50WDsKICAgICAgICB2YXIgeSA9ICF0aGlzLmlzTW91c2UgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTsKCiAgICAgICAgaWYgKHggJiYgeSkgewogICAgICAgICAgY3VycmVudFggPSB4ICogdGhpcy5mYWN0b3IgLSB0aGlzLnRlbXBDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDsKICAgICAgICAgIGN1cnJlbnRZID0geSAqIHRoaXMuZmFjdG9yIC0gdGhpcy50ZW1wQ2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDsKICAgICAgICAgIHRoaXMucG9pbnRDb29yZHMucHVzaCh7CiAgICAgICAgICAgIHg6IGN1cnJlbnRYLAogICAgICAgICAgICB5OiBjdXJyZW50WQogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKHRoaXMudGhyZXNob2xkKSB7CiAgICAgICAgICAgIHZhciBkaXN0YW5jZUZpcnN0QW5kTGFzdFBvaW50ID0gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMucG9pbnRDb29yZHNbdGhpcy5wb2ludENvb3Jkcy5sZW5ndGggLSAxXS55IC0gdGhpcy5wb2ludENvb3Jkc1swXS55LCAyKSArIE1hdGgucG93KHRoaXMucG9pbnRDb29yZHNbdGhpcy5wb2ludENvb3Jkcy5sZW5ndGggLSAxXS54IC0gdGhpcy5wb2ludENvb3Jkc1swXS54LCAyKSk7CgogICAgICAgICAgICBpZiAoZGlzdGFuY2VGaXJzdEFuZExhc3RQb2ludCA+IHRoaXMudGhyZXNob2xkKSB7CiAgICAgICAgICAgICAgaWYgKCF0aGlzLnRocmVzaG9sZFJlYWNoZWQpIHsKICAgICAgICAgICAgICAgIHRoaXMudGhyZXNob2xkUmVhY2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCd0aHJlc2hvbGRSZWFjaGVkJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5kcmF3TGluZSghdGhpcy5pc0VyYXNlckFjdGl2ZSA/IHRoaXMudGVtcEN0eCA6IHRoaXMuY3R4KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn07"},{"version":3,"sources":["Paintable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"paintable\" v-if=\"!hide\">\n    <Navigation\n      v-if=\"!disableNavigation\"\n      :horizontalNavigation=\"horizontalNavigation\"\n    >\n      <div slot=\"paintable-navigation-draw\"></div>\n    </Navigation>\n\n    <canvas\n      :ref=\"'canvas-' + canvasId\"\n      :class=\"{ active: isActive || alwaysOnTop }\"\n      :style=\"{\n        pointerEvents: !isActive ? 'none' : 'all',\n        display: !canvasIsEmpty || isActive ? 'block' : 'none'\n      }\"\n      class=\"canvas back\"\n      :width=\"width\"\n      :height=\"height\"\n    />\n\n    <canvas\n      :ref=\"'temp-canvas-' + canvasId\"\n      :class=\"{ active: isActive || alwaysOnTop }\"\n      :style=\"{\n        pointerEvents: !isActive ? 'none' : 'all',\n        display: !canvasIsEmpty || isActive ? 'block' : 'none'\n      }\"\n      class=\"canvas\"\n      :width=\"width\"\n      :height=\"height\"\n      @[drawMoveEvent]=\"drawMove\"\n      @[drawStartEvent]=\"drawStart\"\n      @[drawEndEvent]=\"drawEnd\"\n    />\n\n    <div class=\"content\">\n      <slot></slot>\n    </div>\n  </div>\n  <div v-else class=\"content\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nlet currentX = 0;\nlet currentY = 0;\n\nimport Navigation from './Navigation';\n\nexport default {\n  name: 'paintable',\n  components: {\n    Navigation\n  },\n  props: {\n    factor: {\n      type: Number,\n      default: 1\n    },\n    navigation: {\n      type: Object,\n      default: null\n    },\n    alwaysOnTop: {\n      type: Boolean,\n      default: true\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    width: {\n      type: Number,\n      default: window.innerWidth\n    },\n    height: {\n      type: Number,\n      default: window.innerHeight\n    },\n    hide: {\n      type: Boolean,\n      default: false\n    },\n    threshold: {\n      type: Number,\n      default: 0\n    },\n    showUndoRedo: {\n      type: Boolean,\n      default: true\n    },\n    showLineWidth: {\n      type: Boolean,\n      default: true\n    },\n    lineWidth: {\n      type: Number,\n      default: 5\n    },\n    lineWidthEraser: {\n      type: Number,\n      default: 20\n    },\n    colors: {\n      type: Array,\n      default: () => [\n        'black',\n        '#f00',\n        '#4481c7',\n        'rgba(255, 235, 59, 0.4)',\n        '#999',\n        'green'\n      ]\n    },\n    horizontalNavigation: {\n      type: Boolean,\n      default: false\n    },\n    disableNavigation: {\n      type: Boolean,\n      default: false\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: '#000'\n    },\n    useEraser: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      currentColor: this.color,\n      canvasIsEmpty: false,\n      canvasId: 0,\n      isEraserActive: this.useEraser,\n      isActive: this.active,\n      pointCoords: [],\n      redoList: [],\n      undoList: [],\n      currentLineWidth: this.isEraserActive\n        ? this.lineWidthEraser\n        : this.lineWidth,\n      tempCanvas: null,\n      tempCtx: null,\n      canvas: null,\n      ctx: null,\n      startedDrawing: false,\n      drawMoveEvent: 'mousemove',\n      drawStartEvent: 'mousedown',\n      drawEndEvent: 'mouseup',\n      isMouse: true,\n      thresholdReached: false\n    };\n  },\n  watch: {\n    isActive: 'init',\n    name: 'init',\n    hide() {\n      this.$nextTick(() => {\n        this.init();\n      });\n    },\n    lineWidth(lineWidth) {\n      this.currentLineWidth = lineWidth;\n    },\n    lineWidthEraser(lineWidth) {\n      this.currentLineWidth = lineWidth;\n    },\n    useEraser(useEraser) {\n      this.isEraserActive = useEraser;\n    },\n    active(isActive) {\n      this.isActive = isActive;\n    },\n    color(color) {\n      this.currentColor = color;\n      this.tempCtx.strokeStyle = this.currentColor;\n      this.ctx.strokeStyle = this.currentColor;\n    },\n    isEraserActive(isActive) {\n      this.currentLineWidth = isActive ? this.lineWidthEraser : this.lineWidth;\n    },\n    currentLineWidth(lineWidth) {\n      this.ctx.lineWidth = lineWidth;\n      this.tempCtx.lineWidth = lineWidth;\n    }\n  },\n  beforeMount() {\n    this.canvasId = Math.round(Math.random() * 1000);\n  },\n  created() {\n    if (this.isTouch) {\n      this.drawMoveEvent = 'touchmove';\n      this.drawStartEvent = 'touchstart';\n      this.drawEndEvent = 'touchend';\n      this.isMouse = false;\n    }\n  },\n  mounted() {\n    this.init();\n  },\n  computed: {\n    /**\n     * Get scaling factor of current device\n     */\n    scalingFactor() {\n      return window.devicePixelRatio || 1;\n    },\n    /**\n     * Check if it is a touch device\n     * thanks to: https://ctrlq.org/code/19616-detect-touch-screen-javascript\n     */\n    isTouch() {\n      return (\n        'ontouchstart' in window ||\n        navigator.MaxTouchPoints > 0 ||\n        navigator.msMaxTouchPoints > 0\n      );\n    }\n  },\n  methods: {\n    /**\n     * Cancel current drawing and remove lines\n     */\n    cancelDrawing() {\n      this.loadImageFromStorage();\n      this.isActive = false;\n      this.isColorPickerOpen = false;\n      this.isLineWidthPickerOpen = false;\n    },\n    /**\n     * Set storage item\n     * @param {string} key\n     * @param {string} value\n     */\n    setItem(key, value) {\n      localStorage.setItem(key, value);\n    },\n    /**\n     * Get storage item\n     * @param {string} key\n     */\n    async getItem(key) {\n      return localStorage.getItem(key);\n    },\n    /**\n     * Remove item from storage\n     * @param {string} key\n     */\n    removeItem(key) {\n      localStorage.removeItem(key);\n    },\n    /**\n     * Init paintable component and set all variables\n     */\n    init() {\n      try {\n        this.pointCoords = [];\n\n        // temporary canvas\n        this.tempCanvas = this.$refs['temp-canvas-' + this.canvasId];\n        this.tempCtx = this.tempCanvas.getContext('2d');\n\n        // canvas with drawing\n        this.canvas = this.$refs['canvas-' + this.canvasId];\n        this.ctx = this.canvas.getContext('2d');\n\n        this.tempCtx.lineCap = 'round';\n        this.ctx.lineCap = 'round';\n\n        this.tempCtx.lineWidth = this.lineWidth;\n        this.ctx.lineWidth = this.lineWidth;\n\n        this.tempCtx.strokeStyle = this.currentColor;\n        this.ctx.strokeStyle = this.currentColor;\n\n        this.setItem(\n          this.name + '-settings',\n          JSON.stringify({\n            width: this.canvas.width,\n            height: this.canvas.height\n          })\n        );\n\n        // set canvas width and height\n        this.setCanvasSize();\n\n        // load image from storage\n        this.loadImageFromStorage();\n\n        this.$emit('toggle-paintable', this.isActive);\n      } catch (err) {\n        // this.hide = true;\n        // this.hidePaintableNavigation = true;\n      }\n    },\n    //--------------------------------------------------\n    /**\n     * Undo drawed line\n     */\n    undoDrawingStep() {\n      this.restoreCanvasState(this.undoList, this.redoList);\n    },\n    /**\n     * Redo drawed line\n     */\n    redoDrawingStep() {\n      this.restoreCanvasState(this.redoList, this.undoList);\n    },\n    /**\n     * Restore previous image\n     */\n    restoreCanvasState(pop, push) {\n      this.ctx.globalCompositeOperation = 'source-over';\n      if (pop.length) {\n        const restore_state = pop.pop();\n        this.saveCurrentCanvasState(this.canvas, push, true);\n        this.loadImageFromStorage(restore_state);\n      }\n    },\n    /**\n     * Save the current canvas state an push it to undo- or redolist\n     */\n    saveCurrentCanvasState(canvas, list, keepRedo) {\n      keepRedo = keepRedo || false;\n      if (!keepRedo) {\n        this.redoList = [];\n      }\n\n      (list || this.undoList).push(canvas.toDataURL('image/png'));\n    },\n    //-------------------------------------------------------------------------\n    /**\n     * Get base64 from local storage and load it into canvas\n     */\n    async loadImageFromStorage(image) {\n      this.clearCanvas();\n\n      const base64Image = image || (await this.getItem(this.name));\n      if (base64Image) {\n        let image = new Image();\n        image.onload = () => {\n          this.ctx.drawImage(image, 0, 0);\n          this.canvasIsEmpty = this.isCanvasBlank();\n        };\n        image.src = base64Image; // eslint-disable-line\n      } else {\n        this.canvasIsEmpty = this.isCanvasBlank();\n      }\n    },\n    /**\n     * Set current canvas size\n     */\n    setCanvasSize() {\n      // this.width = window.innerWidth;\n      // this.height = window.innerHeight;\n      currentX = 0;\n      currentY = 0;\n    },\n    /**\n     * Clear complete canvas\n     */\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    },\n    isCanvasBlank() {\n      this.ctx.globalCompositeOperation = 'source-over';\n\n      const blank = document.createElement('canvas');\n      const blankCtx = blank.getContext('2d');\n\n      blankCtx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      blank.width = this.canvas.width;\n      blank.height = this.canvas.height;\n\n      return blank.toDataURL() === this.canvas.toDataURL();\n    },\n    /**\n     * Check first, if canvas is empty.\n     * If its not empty save it to the storage.\n     */\n    saveCurrentCanvasToStorage() {\n      // reset to pencil\n      this.isEraserActive = false;\n\n      if (this.isCanvasBlank()) {\n        this.removeItem(this.name);\n        this.removeItem(this.name + '-settings');\n      } else {\n        this.setItem(this.name, this.canvas.toDataURL('image/png'));\n        this.setItem(\n          this.name + '-settings',\n          JSON.stringify({\n            width: this.canvas.width,\n            height: this.canvas.height\n          })\n        );\n      }\n      this.undoList = [];\n      this.redoList = [];\n\n      this.canvasIsEmpty = this.isCanvasBlank();\n    },\n    //-------------------------------------------------------------------------\n    /**\n     * Start drawing lines\n     */\n    drawStart(e) {\n      e.preventDefault();\n      this.thresholdReached = false;\n      if (this.isActive) {\n        this.isLineWidthPickerOpen = false;\n        this.isColorPickerOpen = false;\n        this.startedDrawing = true;\n\n        this.saveCurrentCanvasState(this.canvas);\n\n        const x = !this.isMouse ? e.targetTouches[0].clientX : e.clientX;\n        const y = !this.isMouse ? e.targetTouches[0].clientY : e.clientY;\n\n        if (x && y) {\n          currentX =\n            x * this.factor - this.tempCanvas.getBoundingClientRect().left;\n          currentY =\n            y * this.factor - this.tempCanvas.getBoundingClientRect().top;\n\n          this.pointCoords.push({\n            x: currentX,\n            y: currentY\n          });\n        }\n\n        this.tempCtx.globalCompositeOperation = 'source-over';\n        this.ctx.globalCompositeOperation = this.isEraserActive\n          ? 'destination-out'\n          : 'source-over';\n      }\n    },\n    /**\n     * End of drawing a line\n     */\n    drawEnd() {\n      if (this.isActive) {\n        this.drawLine(this.ctx);\n        this.startedDrawing = false;\n\n        this.pointCoords = [];\n        this.thresholdReached = false;\n      }\n    },\n    /**\n     * Generate line from points array\n     */\n    drawLine(context) {\n      this.tempCtx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      let p1 = this.pointCoords[0];\n      let p2 = this.pointCoords[1];\n\n      if (p1 && p2 && p1.x && p1.y) {\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n\n        for (let i = 1, len = this.pointCoords.length; i < len; i++) {\n          let midPoint = {\n            x: p1.x + (p2.x - p1.x) / 2,\n            y: p1.y + (p2.y - p1.y) / 2\n          };\n          context.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n          p1 = this.pointCoords[i];\n          p2 = this.pointCoords[i + 1];\n        }\n\n        context.lineTo(p1.x, p1.y);\n        context.stroke();\n        context.closePath();\n      }\n    },\n    /**\n     * Draw line on move and add current position to an array\n     */\n    drawMove(e) {\n      e.preventDefault();\n\n      if (this.isActive && this.startedDrawing) {\n        const x = !this.isMouse ? e.targetTouches[0].clientX : e.clientX;\n        const y = !this.isMouse ? e.targetTouches[0].clientY : e.clientY;\n\n        if (x && y) {\n          currentX =\n            x * this.factor - this.tempCanvas.getBoundingClientRect().left;\n          currentY =\n            y * this.factor - this.tempCanvas.getBoundingClientRect().top;\n\n          this.pointCoords.push({\n            x: currentX,\n            y: currentY\n          });\n\n          if (this.threshold) {\n            const distanceFirstAndLastPoint = Math.sqrt(\n              Math.pow(\n                this.pointCoords[this.pointCoords.length - 1].y -\n                  this.pointCoords[0].y,\n                2\n              ) +\n                Math.pow(\n                  this.pointCoords[this.pointCoords.length - 1].x -\n                    this.pointCoords[0].x,\n                  2\n                )\n            );\n\n            if (distanceFirstAndLastPoint > this.threshold) {\n              if (!this.thresholdReached) {\n                this.thresholdReached = true;\n                this.$emit('thresholdReached');\n              }\n            }\n          }\n\n          this.drawLine(!this.isEraserActive ? this.tempCtx : this.ctx);\n        }\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\nbody {\n  position: fixed;\n}\n.paintable {\n  overflow: hidden;\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  transform: scale(1);\n}\n.paintable.active {\n  z-index: 0;\n}\n.paintable .canvas {\n  position: relative;\n  background-color: transparent;\n  z-index: -1;\n  position: absolute;\n  left: 0;\n  top: 0;\n  overflow: hidden;\n  touch-action: none;\n}\n.paintable .canvas.active {\n  z-index: 1000;\n}\n.paintable .canvas.active.back {\n  z-index: 999;\n}\n</style>\n"],"sourceRoot":"src/components/components"}]}